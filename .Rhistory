#load libraries
library(tidyverse)
library(readxl)
# point to directories
meta_dir = 'Z:/project_data/ASV_data/raw_data/metadata/'
parent_dir = 'Z:/project_data/compiled_metadata/'
#list files in meta dir
filelist <- list.files(meta_dir)
dep_log <- read_xlsx(file.path([directory, filename[2]]),
sheet = 'deployment_log',
col_types = c('date', 'text', 'text', 'text', 'text', 'text', 'text', 'text', 'time', 'time', 'text', 'text', 'text', 'text', 'text', 'text', 'text'))
dep_log <- read_xlsx(file.path([directory, filename[2]),
sheet = 'deployment_log',
col_types = c('date', 'text', 'text', 'text', 'text', 'text', 'text', 'text', 'time', 'time', 'text', 'text', 'text', 'text', 'text', 'text', 'text'))
dep_log <- read_xlsx(file.path(directory, filename[2]),
sheet = 'deployment_log',
col_types = c('date', 'text', 'text', 'text', 'text', 'text', 'text', 'text', 'time', 'time', 'text', 'text', 'text', 'text', 'text', 'text', 'text'))
dep_log <- read_xlsx(file.path(meta_dir, filename[2]),
sheet = 'deployment_log',
col_types = c('date', 'text', 'text', 'text', 'text', 'text', 'text', 'text', 'time', 'time', 'text', 'text', 'text', 'text', 'text', 'text', 'text'))
dep_log <- read_xlsx(file.path(meta_dir, filelist[2]),
sheet = 'deployment_log',
col_types = c('date', 'text', 'text', 'text', 'text', 'text', 'text', 'text', 'time', 'time', 'text', 'text', 'text', 'text', 'text', 'text', 'text'))
dep_log <- read_xlsx(file.path(meta_dir, filelist[2]),
sheet = 'deployment_log',
col_types = c('date', 'text', 'text', 'text', 'text', 'text', 'text', 'text', 'time', 'time', 'text', 'text', 'text', 'text', 'text', 'text', 'text'))
meta_dir
filelist
file.path(meta_dir, filelist[2])
read_xlsx(file.path(meta_dir, filelist[2]), sheet = 'deployment_log')
dep_log <- read_xlsx(file.path(meta_dir, filelist[2]),
sheet = 'deployment_log',
col_types = c('date', 'text', 'text', 'text', 'text', 'text', 'text', 'text', 'time', 'time', 'text', 'text', 'text', 'text', 'text', 'text', 'text'))
dep_log <- read_xlsx(file.path(meta_dir, filelist[2]),
sheet = 'deployment_log',
col_types = c('date', 'text', 'text', 'text', 'text', 'text', 'text', 'text', 'date', 'date', 'text', 'text', 'text', 'text', 'text', 'text', 'text'))
View(dep_log)
# write a function to read in all metadata files, including each of the worksheets
read_asv_uav_template = function(filename, directory){
dep_log <- read_xlsx(file.path(directory, filename),
sheet = 'deployment_log')
add_data <- read_xlsx(file.path(directory, filename),
sheet = 'additional_data_log')
metadata <- full_join(dep_log, add_data) %>%
mutate(start_time = format(start_time, '%H:%M'),
end_time = format(end_time, '%H:%M'))
}
read_asv_uav_template(meta_dir, filelist[2])
read_asv_uav_template(filelist[2], meta_dir)
df <- read_asv_uav_template(filelist[2], meta_dir)
View(df)
#list files in meta dir
filelist <- list.files(meta_dir)
# write a function to read in all metadata files, including each of the worksheets
read_asv_uav_template = function(filename, directory){
dep_log <- read_xlsx(file.path(directory, filename),
sheet = 'deployment_log')
add_data <- read_xlsx(file.path(directory, filename),
sheet = 'additional_data_log')
metadata <- full_join(dep_log, add_data) %>%
mutate(start_time = format(start_time, '%H:%M'),
end_time = format(end_time, '%H:%M'))
}
#apply function over filelist
for(i in 1:length(filelist)) {
dataframe = read_asv_uav_template(filelist[i], meta_dir)
if(i == 1){
compiled = dataframe
} else {
compiled <- full_join(compiled, dataframe)
}
}
#save compiled metadata
write.csv(compiled, file.path(parent_dir, paste0('compiled_ASV_UAV_metadata_', Sys.Date(), '.csv')), row.names = F)
osVersion
path_pat = NULL
if (grepl('win', os, ignore.case = T)){
path_pat = 'Z:/'} else {
grepl('mac', os, ignore.case = T){
path_pat = '/Volumes/'
} else {
message('OS path pattern not detected.')
}
}
# determine OS for automatic filepath determination
os <- osVersion
grepl('win', os, ignore.case = T)
if (grepl('win', os, ignore.case = T) == T ){
path_pat = 'Z:/'} else {
grepl('mac', os, ignore.case = T) == T {
path_pat = '/Volumes/'
} else {
message('OS path pattern not detected.')
}
}
if (grepl('win', os, ignore.case = T) == T ){
path_pat = 'Z:/'
} else {
grepl('mac', os, ignore.case = T) == T {
path_pat = '/Volumes/'
} else {
message('OS path pattern not detected.')
}
}
if (grepl('win', os, ignore.case = T) == T ){
path_pat = 'Z:/'
} else {}
if (grepl('win', os, ignore.case = T) == T ){
path_pat = 'Z:/'
} else {
grepl('mac', os, ignore.case = T) == T {
path_pat = '/Volumes/'}
if (grepl('win', os, ignore.case = T) == T ){
path_pat = 'Z:/'
} else {
(grepl('mac', os, ignore.case = T) == T) {
path_pat = '/Volumes/'}
if (grepl('win', os, ignore.case = T) == T ){
path_pat = 'Z:/'
} else(grepl('mac', os, ignore.case = T) == T) {
path_pat = '/Volumes/'
} else {
message('OS path pattern not detected.')
}
if (grepl('win', os, ignore.case = T) == T ){
path_pat = 'Z:/'
} else(grepl('mac', os, ignore.case = T) == T) {
path_pat = '/Volumes/'
}
if (grepl('win', os, ignore.case = T) == T ){
path_pat = 'Z:/'
} ifelse(grepl('mac', os, ignore.case = T) == T) {
path_pat = '/Volumes/'
} else {
message('OS path pattern not detected.')
}
if (grepl('win', os, ignore.case = T) == T ){
path_pat = 'Z:/'
} else  {next}
if (grepl('mac', os, ignore.case = T) == T ){
path_pat = '/Volumes/'
} else {message('OS path pattern not detected.')}
if (grepl('win', os, ignore.case = T) == T ){
path_pat = 'Z:/'
} else if (grepl('mac', os, ignore.case = T) == T ){
path_pat = '/Volumes/'
} else {
message('OS path pattern not detected.')
}
os = 'MAcintosh'
if (grepl('win', os, ignore.case = T) == T ){
path_pat = 'Z:/'
} else if (grepl('mac', os, ignore.case = T) == T ){
path_pat = '/Volumes/'
} else {
message('OS path pattern not detected.')
}
os = 'Linus=x'
if (grepl('win', os, ignore.case = T) == T ){
path_pat = 'Z:/'
} else if (grepl('mac', os, ignore.case = T) == T ){
path_pat = '/Volumes/'
} else {
message('OS path pattern not detected.')
}
# This script compiles all metadata for the robotics runs from the ASV template.
#load libraries
library(tidyverse)
library(readxl)
# determine OS for automatic filepath determination
os <- osVersion
path_pat = NULL
if (grepl('win', os, ignore.case = T) == T ){
path_pat = 'Z:/'
} else if (grepl('mac', os, ignore.case = T) == T ){
path_pat = '/Volumes/EpscorBlooms/'
} else {
message('OS path pattern not detected. Please store OS path pattern manually.')
}
# point to directories
meta_dir = paste0(path_pat, 'project_data/ASV_data/raw_data/metadata/')
parent_dir = paste0(path_pat, 'project_data/compiled_metadata/')
#list files in meta dir
filelist <- list.files(meta_dir)
# write a function to read in all metadata files, including each of the worksheets
read_asv_uav_template = function(filename, directory){
dep_log <- read_xlsx(file.path(directory, filename),
sheet = 'deployment_log')
add_data <- read_xlsx(file.path(directory, filename),
sheet = 'additional_data_log')
metadata <- full_join(dep_log, add_data) %>%
mutate(start_time = format(start_time, '%H:%M'),
end_time = format(end_time, '%H:%M'))
}
#apply function over filelist
for(i in 1:length(filelist)) {
dataframe = read_asv_uav_template(filelist[i], meta_dir)
if(i == 1){
compiled = dataframe
} else {
compiled <- full_join(compiled, dataframe)
}
}
#save compiled metadata
write.csv(compiled, file.path(parent_dir, paste0('compiled_ASV_UAV_metadata_', Sys.Date(), '.csv')), row.names = F)
